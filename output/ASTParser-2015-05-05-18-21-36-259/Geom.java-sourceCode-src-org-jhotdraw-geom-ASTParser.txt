/* * @ # Geom 2 2 2006-07-04 * * Copyright 1996-2006 by the original authors of Jhotdraw * and all its contributors Jhotdraw org * All rights reserved * * This software the confidential and proprietary information of * Jhotdraw org Confidential Information You shall not disclose * such Confidential Information and shall use it only accordance * with the terms of the license agreement you entered into with * Jhotdraw org ï¿½ */ // never instantiated // Chopped point // Try for points along edge /* if Closed size > 1 { Node first = get 0 Node last = get size - 1 Point2 chop = Geom intersect first 0 first 0 last 0 last 0 ctr ctr if chop != { = Geom length2 chop chop if < len { len = cx = chop cy = chop } } }*/ // if none found pick closest vertex // from Doug Lea's Polygon Figure // line 1 point 1 // line 1 point 1 // line 1 point 2 // line 1 point 2 // line 2 point 1 // line 2 point 1 // line 2 point 2 // line 2 point 2 // source http //vision dai uk/andrewfg/c-g-a-faq html // eq for lines A B and C // Y A- Y C X D- X C - X A- X C Y D- Y C // = ----------------------------- eqn 1 // X B- X A Y D- Y C - Y B- Y A X D- X C // // Y A- Y C X B- X A - X A- X C Y B- Y A // = ----------------------------- eqn 2 // X B- X A Y D- Y C - Y B- Y A X D- X C // X I = X A + X B- X A // Y I = Y A + Y B- Y A // parallel // coincident pick one of first line // from Doug Lea's Polygon Figure // line 1 point 1 // line 1 point 1 // line 1 point 2 // line 1 point 2 // line 2 point 1 // line 2 point 1 // line 2 point 2 // line 2 point 2 // source http //vision dai uk/andrewfg/c-g-a-faq html // eq for lines A B and C // Y A- Y C X D- X C - X A- X C Y D- Y C // = ----------------------------- eqn 1 // X B- X A Y D- Y C - Y B- Y A X D- X C // // Y A- Y C X B- X A - X A- X C Y B- Y A // = ----------------------------- eqn 2 // X B- X A Y D- Y C - Y B- Y A X D- X C // X I = X A + X B- X A // Y I = Y A + Y B- Y A // parallel // coincident pick one of first line // line 1 point 1 // line 1 point 1 // line 1 point 2 // line 1 point 2 // line 2 point 1 // line 2 point 1 // line 2 point 2 // line 2 point 2 // source http //vision dai uk/andrewfg/c-g-a-faq html // eq for lines A B and C // Y A- Y C X D- X C - X A- X C Y D- Y C // = ----------------------------- eqn 1 // X B- X A Y D- Y C - Y B- Y A X D- X C // // Y A- Y C X B- X A - X A- X C Y B- Y A // = ----------------------------- eqn 2 // X B- X A Y D- Y C - Y B- Y A X D- X C // X I = X A + X B- X A // Y I = Y A + Y B- Y A // parallel // coincident pick one of first line // from Doug Lea's Polygon Figure // source http //vision dai uk/andrewfg/c-g-a-faq html#q7 // Let the point be C X C Y C and the line be A B X A Y A to X B Y B // The length of the // line segment A B L // // ___________________ // | 2 2 // L = \| X B- X A + Y B- Y A //and // // Y A- Y C Y A- Y B - X A- X C X B- X A // = ----------------------------- // L**2 // // Y A- Y C X B- X A - X A- X C Y B- Y A // = ----------------------------- // L**2 // // Let I be the point of perpendicular projection of C onto A B the // // X I= X A+r X B- X A // Y I= Y A+r Y B- Y A // // Distance from A to I = r* L // Distance from C to I = s* L // // If < 0 I backward extension of A B // If r>1 I ahead extension of A B // If 0<=r<=1 I A B // // If < 0 C left of A B you can just check the numerator // If s>0 C right of A B // If s=0 C A B /* for directional instead use snum = ya-yc * xb-xa - xa-xc * yb-ya = snum / l2 = Math sqrt l2 = * */ 